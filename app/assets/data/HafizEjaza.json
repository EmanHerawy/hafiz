{
  "address": "0x9aaD4719E6466835cb5B6c474450B20482DA672e",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotParentCertOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSameLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotSameRecitation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotValidIssueTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "parentCertId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IEjaza.Recitations",
          "name": "recitation",
          "type": "uint8"
        }
      ],
      "name": "EjazaIssued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ejazaLink",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ejazaId",
          "type": "uint256"
        }
      ],
      "name": "getRecitation",
      "outputs": [
        {
          "internalType": "enum IEjaza.Recitations",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isssuedEjaza",
      "outputs": [
        {
          "internalType": "enum IEjaza.Recitations",
          "name": "qiraa",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "issueTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "parentCertId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "recodingURl",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentCertId_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "recodingURl_",
          "type": "string"
        },
        {
          "internalType": "enum IEjaza.Recitations",
          "name": "qiraa_",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "issueEjaza",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tos",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "enum IEjaza.Recitations",
              "name": "qiraa",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "issueTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "parentCertId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "recodingURl",
              "type": "string"
            }
          ],
          "internalType": "struct IEjaza.Ejaza[]",
          "name": "_legacyEjaza",
          "type": "tuple[]"
        }
      ],
      "name": "issueForLegacyEjaza",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_daoContract",
          "type": "address"
        }
      ],
      "name": "setDAO",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfdc75ef5afce04cf0c48b6fc1239193e5a6be619186db0d36313eb873fa2293f",
  "receipt": {
    "to": null,
    "from": "0x8906EA0bc4b4e62314417eCdcbe45757112720E8",
    "contractAddress": "0x9aaD4719E6466835cb5B6c474450B20482DA672e",
    "transactionIndex": 3,
    "gasUsed": "84848869",
    "logsBloom": "0xeff6e5ddbbef57ffafdbf6fe7fc6ffe3fedfebae1eddc6cbfff9f99a459bbfff1fa39377eb6bc7e2fcfc7f71bfd7d5ebd9b6fc5bdf7effff5ba97e1ff3777df9ffffffebfe3f7dfed6c99fdfff3eebefbfffcbefdffe7fdbae8ffff6bfff6dffef6e5b90ef3deddd55fff3b7fe7c3ae73ddffbfef93affff7afff77fdef7fdfddff72eadcdfd8fffeffd976e7fdbdfdffdeaffbfb7f79e9dbfeff7f3bbfbf7f3bf7cbf377ff3dfff7fbf57feffcdff86bc5a72ef8fffdd240aff7efd6f3fefdffff57df7e7c75cff7ff457cfff7efb8ffb77fdfdf7dbe6ffffaf2defffffebffffddef7f7fbbfbf53db6dfbf8bf5b515f8e7e6b3d7ffafff97acfd9dbfff7fff",
    "blockHash": "0x2ed89bab37406b592077c17093a0119bf1eba97e2042623a9549a2b995316109",
    "transactionHash": "0xfdc75ef5afce04cf0c48b6fc1239193e5a6be619186db0d36313eb873fa2293f",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 949771,
        "transactionHash": "0xfdc75ef5afce04cf0c48b6fc1239193e5a6be619186db0d36313eb873fa2293f",
        "address": "0x9aaD4719E6466835cb5B6c474450B20482DA672e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008906ea0bc4b4e62314417ecdcbe45757112720e8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2ed89bab37406b592077c17093a0119bf1eba97e2042623a9549a2b995316109"
      }
    ],
    "blockNumber": 949771,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d97d66bac201c1e27bfdab49244036be",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotParentCertOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSameLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotSameRecitation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotValidIssueTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"parentCertId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IEjaza.Recitations\",\"name\":\"recitation\",\"type\":\"uint8\"}],\"name\":\"EjazaIssued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ejazaLink\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ejazaId\",\"type\":\"uint256\"}],\"name\":\"getRecitation\",\"outputs\":[{\"internalType\":\"enum IEjaza.Recitations\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isssuedEjaza\",\"outputs\":[{\"internalType\":\"enum IEjaza.Recitations\",\"name\":\"qiraa\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"issueTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parentCertId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"recodingURl\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentCertId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"recodingURl_\",\"type\":\"string\"},{\"internalType\":\"enum IEjaza.Recitations\",\"name\":\"qiraa_\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"issueEjaza\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tos\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum IEjaza.Recitations\",\"name\":\"qiraa\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"issueTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"parentCertId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"recodingURl\",\"type\":\"string\"}],\"internalType\":\"struct IEjaza.Ejaza[]\",\"name\":\"_legacyEjaza\",\"type\":\"tuple[]\"}],\"name\":\"issueForLegacyEjaza\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daoContract\",\"type\":\"address\"}],\"name\":\"setDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRecitation(uint256)\":{\"details\":\"Returns recitation of the ejaza.\",\"params\":{\"_ejazaId\":\": Id of the ejaza.\"},\"returns\":{\"_0\":\"Recitation of the ejaza.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"NotValidIssueTime()\":[{\"notice\":\"if  _legacyEjaza[index].issueTime == 0 || _legacyEjaza[index].issueTime >= block.timestamp \"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HafizEjaza.sol\":\"HafizEjaza\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/HafizEjaza.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./IEjaza.sol\\\";\\n// nft based Ejaza certificate. non transferable , minitters are nft holders. it should keep track of parent nft for every minted child nft\\n\\ncontract HafizEjaza is IEjaza, Ownable, ERC721 {\\n    address daoContract;\\n    uint256 public counter;\\n  \\n\\n\\n    // token id to Ejaza details\\n    mapping(uint256 => Ejaza) public isssuedEjaza;\\n    // link the minted ejaza to its parent\\n    // tokenid to tokenid\\n    mapping(uint256 => uint256) public ejazaLink;\\n    modifier onlyDAO() {\\n        if (_msgSender() != daoContract) {\\n            revert NotAuthorized();\\n        }\\n        _;\\n    }\\n\\n    constructor() ERC721(\\\"Hafiz Ejaza Token\\\", \\\"HET\\\") {}\\n    // set dao address , only owner can call this\\n    function setDAO(address _daoContract) external onlyOwner {\\n        if (_daoContract == address(0)) {\\n            revert();\\n        }\\n        daoContract = _daoContract;\\n    }\\n    function issueForLegacyEjaza(\\n        address[] memory _tos,\\n        Ejaza[] memory _legacyEjaza\\n    ) external onlyOwner {\\n        uint256 length = _legacyEjaza.length;\\n        uint256 index;\\n        if (_tos.length != length) {\\n            revert NotSameLength();\\n        }\\n        for (; index < length; ++index ) {\\n            if (\\n                 _legacyEjaza[index].issueTime == 0 \\n                //   ||\\n                //  _legacyEjaza[index].issueTime >= block.timestamp\\n            ) {\\n                revert NotValidIssueTime();\\n            }\\n            unchecked {\\n                ++counter;\\n            }\\n            isssuedEjaza[counter] = _legacyEjaza[index];\\n            _safeMint(_tos[index], counter, \\\"\\\");\\n            ejazaLink[counter] = _legacyEjaza[index].parentCertId;\\n        \\n            emit EjazaIssued(\\n                _tos[index],\\n                _msgSender(),\\n                _legacyEjaza[index].parentCertId,\\n                counter,\\n                _legacyEjaza[index].qiraa\\n            );\\n        }\\n    }\\n\\n    function issueEjaza(\\n        uint256 parentCertId_,\\n        string memory recodingURl_,\\n        Recitations qiraa_,\\n        address from,\\n        address to\\n    ) external onlyDAO returns (uint256) {\\n        if (ownerOf(parentCertId_) != from) {\\n             revert NotParentCertOwner();\\n        }\\n        if (isssuedEjaza[parentCertId_].qiraa != qiraa_) {\\n            revert NotSameRecitation();\\n        }\\n\\n        unchecked {\\n            ++counter;\\n        }\\n        _safeMint(to, counter, \\\"\\\");\\n        ejazaLink[counter] = parentCertId_;\\n        isssuedEjaza[counter] = Ejaza({\\n            qiraa: qiraa_,\\n            issueTime: block.timestamp,\\n            parentCertId: parentCertId_,\\n            recodingURl: recodingURl_\\n        });\\n        emit EjazaIssued(to, from, parentCertId_, counter, qiraa_);\\n        return counter;\\n    }\\n\\n    /// @dev Returns recitation of the ejaza.\\n    /// @param _ejazaId: Id of the ejaza.\\n    /// @return Recitation of the ejaza.\\n    function getRecitation(uint256 _ejazaId)\\n        external\\n        view\\n        returns (Recitations)\\n    {\\n        return isssuedEjaza[_ejazaId].qiraa;\\n    }\\n\\n    function _safeTransfer(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) internal pure override {\\n        revert();\\n    }\\n\\n    function _transfer(\\n        address,\\n        address,\\n        uint256\\n    ) internal pure override {\\n        revert();\\n    }\\n\\n    // make it non transaferable\\n\\n    event EjazaIssued(\\n        address indexed to,\\n        address from,\\n        uint256 indexed parentCertId,\\n        uint256 indexed id,\\n        Recitations recitation\\n    );\\n}\\n\",\"keccak256\":\"0x9b63083a60ce74b523f97ef328884d2920b024e917f20f4c2b7aab6a51c3cd91\",\"license\":\"MIT\"},\"contracts/IEjaza.sol\":{\"content\":\"/// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IEjaza {\\n  // we need to know the type of recitations\\n    /**\\n   \\u062d\\u0641\\u0635 \\u0639\\u0646 \\u0639\\u0627\\u0635\\u0645.\\n  \\u0648\\u0631\\u0634 \\u0639\\u0646 \\u0646\\u0627\\u0641\\u0639.\\n  \\u0642\\u0627\\u0644\\u0648\\u0646 \\u0639\\u0646 \\u0646\\u0627\\u0641\\u0639.\\n  \\u0627\\u0644\\u062f\\u0648\\u0631\\u064a \\u0639\\u0646 \\u0623\\u0628\\u064a \\u0639\\u0645\\u0631\\u0648.\\n  \\u0623\\u0628\\u064a \\u0627\\u0644\\u062d\\u0627\\u0631\\u062b \\u0639\\u0646 \\u0627\\u0644\\u0643\\u0633\\u0627\\u0626\\u064a.\\n  \\u0627\\u0644\\u062f\\u0648\\u0631\\u064a \\u0639\\u0646 \\u0627\\u0644\\u0643\\u0633\\u0627\\u0626\\u064a.\\n  \\u0634\\u0639\\u0628\\u0629 \\u0639\\u0646 \\u0639\\u0627\\u0635\\u0645.\\n  \\u0642\\u0646\\u0628\\u0644 \\u0639\\u0646 \\u0627\\u0628\\u0646 \\u0643\\u062b\\u064a\\u0631.\\n  \\u0627\\u0644\\u0628\\u0632\\u064a \\u0639\\u0646 \\u0627\\u0628\\u0646 \\u0643\\u062b\\u064a\\u0631.\\n  \\u0627\\u0644\\u0633\\u0648\\u0633\\u064a \\u0639\\u0646 \\u0623\\u0628\\u064a \\u0639\\u0645\\u0631\\u0648.\\n     */\\n    enum Recitations {\\n        Hafs_3an_Aasem,\\n        Warash_3an_Nafi3,\\n        Qalun_3an_Nafi3,\\n        Aldawriu_3an_Abi_Amr,\\n        Abi_alharith_3an_Alkisaaiy,\\n        Aldawri_3an_Alkisaaiy,\\n        Shoo3ba_3an_Aasem,\\n        Qunbul_3an_Abn_Katheer,\\n        Albizi_3an_Abn_Katheer,\\n        Alsuwsi_3an_Abi_Amr\\n    }\\n        struct Ejaza {\\n        Recitations qiraa;\\n        // The timestamp from the block when this is created.\\n        uint256 issueTime;\\n        uint256 parentCertId;\\n        // recording cid\\n        string recodingURl;\\n    }\\n\\n    // define error messages\\n    error NotAuthorized();\\n    error ZeroAddress();\\n    // error if the from is not the owner of the parent cert\\n    error NotParentCertOwner();\\n    // error if issuing diffrent recitation\\n    error NotSameRecitation();\\n    //  if (_tos.length != length)\\n    error NotSameLength();\\n    /** if  _legacyEjaza[index].issueTime == 0 ||\\n                _legacyEjaza[index].issueTime >= block.timestamp */\\n    error NotValidIssueTime();\\n\\n}\",\"keccak256\":\"0xf8c94e26f91c8fc5a8726e559905d7586b485622b51f6b92d070e62592d9917b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051806040016040528060118152602001702430b334bd1022b530bd30902a37b5b2b760791b8152506040518060400160405280600381526020016212115560ea1b815250620000726200006c6200009860201b60201c565b6200009c565b600162000080838262000205565b5060026200008f828262000205565b505050620002d5565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200012d57607f821691505b60208210810362000142576200014262000102565b50919050565b600062000159620001568381565b90565b92915050565b6200016a8362000148565b81546008840282811b60001990911b908116901990911617825550505050565b6000620001998184846200015f565b505050565b81811015620001bd57620001b46000826200018a565b6001016200019e565b5050565b601f82111562000199576000818152602090206020601f85010481016020851015620001ea5750805b620001fe6020601f8601048301826200019e565b5050505050565b81516001600160401b03811115620002215762000221620000ec565b6200022d825462000118565b6200023a828285620001c1565b6020601f831160018114620002715760008415620002585750858201515b600019600886021c1981166002860217865550620002cd565b600085815260208120601f198616915b82811015620002a3578885015182556020948501946001909201910162000281565b86831015620002c05784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b61211b80620002e56000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806370a08231116100e3578063a22cb4651161008c578063e73a914c11610066578063e73a914c1461035a578063e985e9c51461036d578063f2fde38b146103a957600080fd5b8063a22cb46514610321578063b88d4fde14610334578063c87b56dd1461034757600080fd5b80638da5cb5b116100bd5780638da5cb5b146102f55780638f3db9881461030657806395d89b411461031957600080fd5b806370a08231146102b7578063715018a6146102ca5780637a7d9227146102d257600080fd5b806323b872dd1161014557806359a1c6881161011f57806359a1c6881461028857806361bc221a1461029b5780636352211e146102a457600080fd5b806323b872dd1461023557806328a20f5e1461024857806342842e0e1461027557600080fd5b8063081812fc11610176578063081812fc146101d0578063095ea7b3146101f057806318ea65fd1461020557600080fd5b806301ffc9a71461019257806306fdde03146101bb575b600080fd5b6101a56101a0366004611365565b6103bc565b6040516101b29190611390565b60405180910390f35b6101c3610459565b6040516101b291906113f4565b6101e36101de366004611416565b6104eb565b6040516101b29190611451565b6102036101fe366004611473565b610512565b005b610228610213366004611416565b60009081526009602052604090205460ff1690565b6040516101b291906114f9565b610203610243366004611507565b6105be565b610268610256366004611416565b600a6020526000908152604090205481565b6040516101b2919061155d565b610203610283366004611507565b6105ec565b610268610296366004611671565b610607565b61026860085481565b6101e36102b2366004611416565b610848565b6102686102c5366004611704565b61087d565b6102036108c1565b6102e56102e0366004611416565b6108d5565b6040516101b29493929190611725565b6000546001600160a01b03166101e3565b61020361031436600461192b565b61098c565b6101c3610be9565b61020361032f3660046119a6565b610bf8565b6102036103423660046119d9565b610c07565b6101c3610355366004611416565b610c35565b610203610368366004611704565b610ca9565b6101a561037b366004611a58565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6102036103b7366004611704565b610cf3565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061041f57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061045357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606001805461046890611aa1565b80601f016020809104026020016040519081016040528092919081815260200182805461049490611aa1565b80156104e15780601f106104b6576101008083540402835291602001916104e1565b820191906000526020600020905b8154815290600101906020018083116104c457829003601f168201915b5050505050905090565b60006104f682610d2d565b506000908152600560205260409020546001600160a01b031690565b600061051d82610848565b9050806001600160a01b0316836001600160a01b0316036105595760405162461bcd60e51b815260040161055090611b2a565b60405180910390fd5b336001600160a01b038216148061059357506001600160a01b038116600090815260066020908152604080832033845290915290205460ff165b6105af5760405162461bcd60e51b815260040161055090611b94565b6105b98383610d61565b505050565b6105c83382610ddc565b6105e45760405162461bcd60e51b815260040161055090611bfe565b6105b9600080fd5b6105b983838360405180602001604052806000815250610c07565b6007546000906001600160a01b0316336001600160a01b031614610657576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826001600160a01b031661066a87610848565b6001600160a01b0316146106aa576040517f6d498aad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360098111156106bc576106bc6114b0565b60008781526009602081905260409091205460ff16908111156106e1576106e16114b0565b14610718576040517febc3639d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600880546001019081905560408051602081019091526000815261073d918491610e5b565b6008546000908152600a6020526040908190208790558051608081019091528085600981111561076f5761076f6114b0565b81526020014281526020018781526020018681525060096000600854815260200190815260200160002060008201518160000160006101000a81548160ff021916908360098111156107c3576107c36114b0565b02179055506020820151600182015560408201516002820155606082015160038201906107f09082611cae565b5090505060085486836001600160a01b03167fc5eb36515745a5ebea3193ec3134046ab9c431fadb18f76eff5e044bf269bcd78688604051610833929190611d72565b60405180910390a45060085495945050505050565b6000818152600360205260408120546001600160a01b0316806104535760405162461bcd60e51b815260040161055090611dc4565b60006001600160a01b0382166108a55760405162461bcd60e51b815260040161055090611e2e565b506001600160a01b031660009081526004602052604090205490565b6108c9610e8e565b6108d36000610eb8565b565b600960205260009081526040902080546001820154600283015460038401805460ff90941694929391929161090990611aa1565b80601f016020809104026020016040519081016040528092919081815260200182805461093590611aa1565b80156109825780601f1061095757610100808354040283529160200191610982565b820191906000526020600020905b81548152906001019060200180831161096557829003601f168201915b5050505050905084565b610994610e8e565b8051825160009082146109d3576040517f200ad92c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81811015610be3578281815181106109ed576109ed611e3e565b602002602001015160200151600003610a32576040517fab75615c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008805460010190558251839082908110610a4f57610a4f611e3e565b602002602001015160096000600854815260200190815260200160002060008201518160000160006101000a81548160ff02191690836009811115610a9657610a966114b0565b0217905550602082015160018201556040820151600282015560608201516003820190610ac39082611cae565b50905050610afc848281518110610adc57610adc611e3e565b602002602001015160085460405180602001604052806000815250610e5b565b828181518110610b0e57610b0e611e3e565b602002602001015160400151600a6000600854815260200190815260200160002081905550600854838281518110610b4857610b48611e3e565b602002602001015160400151858381518110610b6657610b66611e3e565b60200260200101516001600160a01b03167fc5eb36515745a5ebea3193ec3134046ab9c431fadb18f76eff5e044bf269bcd7610b9f3390565b878681518110610bb157610bb1611e3e565b602002602001015160000151604051610bcb929190611d72565b60405180910390a4610bdc81611e6a565b90506109d3565b50505050565b60606002805461046890611aa1565b610c03338383610f15565b5050565b610c113383610ddc565b610c2d5760405162461bcd60e51b815260040161055090611bfe565b610be3600080fd5b6060610c4082610d2d565b6000610c5760408051602081019091526000815290565b90506000815111610c775760405180602001604052806000815250610ca2565b80610c8184610fb7565b604051602001610c92929190611ea6565b6040516020818303038152906040525b9392505050565b610cb1610e8e565b6001600160a01b038116610cc457600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610cfb610e8e565b6001600160a01b038116610d215760405162461bcd60e51b815260040161055090611f18565b610d2a81610eb8565b50565b6000818152600360205260409020546001600160a01b0316610d2a5760405162461bcd60e51b815260040161055090611dc4565b6000818152600560205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190610da382610848565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610de883610848565b9050806001600160a01b0316846001600160a01b03161480610e2f57506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b80610e535750836001600160a01b0316610e48846104eb565b6001600160a01b0316145b949350505050565b610e658383611058565b610e726000848484611160565b6105b95760405162461bcd60e51b815260040161055090611f82565b6000546001600160a01b031633146108d35760405162461bcd60e51b815260040161055090611fc4565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031603610f465760405162461bcd60e51b815260040161055090612008565b6001600160a01b0383811660008181526006602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190610faa908590611390565b60405180910390a3505050565b60606000610fc483611261565b600101905060008167ffffffffffffffff811115610fe457610fe461156b565b6040519080825280601f01601f19166020018201604052801561100e576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611018575b509392505050565b6001600160a01b03821661107e5760405162461bcd60e51b81526004016105509061204a565b6000818152600360205260409020546001600160a01b0316156110b35760405162461bcd60e51b81526004016105509061208e565b6000818152600360205260409020546001600160a01b0316156110e85760405162461bcd60e51b81526004016105509061208e565b6001600160a01b0382166000818152600460209081526040808320805460010190558483526003909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561125657604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906111a490339089908890889060040161209e565b6020604051808303816000875af19250505080156111df575060408051601f3d908101601f191682019092526111dc918101906120c4565b60015b61123c573d80801561120d576040519150601f19603f3d011682016040523d82523d6000602084013e611212565b606091505b5080516000036112345760405162461bcd60e51b815260040161055090611f82565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610e53565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106112aa577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106112d6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106112f457662386f26fc10000830492506010015b6305f5e100831061130c576305f5e100830492506008015b612710831061132057612710830492506004015b60648310611332576064830492506002015b600a83106104535760010192915050565b6001600160e01b031981165b8114610d2a57600080fd5b803561045381611343565b60006020828403121561137a5761137a600080fd5b6000610e53848461135a565b8015155b82525050565b602081016104538284611386565b60005b838110156113b95781810151838201526020016113a1565b50506000910152565b60006113cc825190565b8084526020840193506113e381856020860161139e565b601f01601f19169290920192915050565b60208082528101610ca281846113c2565b8061134f565b803561045381611405565b60006020828403121561142b5761142b600080fd5b6000610e53848461140b565b60006001600160a01b038216610453565b61138a81611437565b602081016104538284611448565b61134f81611437565b80356104538161145f565b6000806040838503121561148957611489600080fd5b60006114958585611468565b92505060206114a68582860161140b565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600a8110610d2a57610d2a6114b0565b806114e0816114c6565b919050565b6000610453826114d6565b61138a816114e5565b6020810161045382846114f0565b60008060006060848603121561151f5761151f600080fd5b600061152b8686611468565b935050602061153c86828701611468565b925050604061154d8682870161140b565b9150509250925092565b8061138a565b602081016104538284611557565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156115a7576115a761156b565b6040525050565b60006115b960405190565b90506114e08282611581565b600067ffffffffffffffff8211156115df576115df61156b565b601f19601f83011660200192915050565b82818337506000910152565b600061160f61160a846115c5565b6115ae565b90508281526020810184848401111561162a5761162a600080fd5b6110508482856115f0565b600082601f83011261164957611649600080fd5b8135610e538482602086016115fc565b600a8110610d2a57600080fd5b803561045381611659565b600080600080600060a0868803121561168c5761168c600080fd5b6000611698888861140b565b955050602086013567ffffffffffffffff8111156116b8576116b8600080fd5b6116c488828901611635565b94505060406116d588828901611666565b93505060606116e688828901611468565b92505060806116f788828901611468565b9150509295509295909350565b60006020828403121561171957611719600080fd5b6000610e538484611468565b6080810161173382876114f0565b6117406020830186611557565b61174d6040830185611557565b818103606083015261175f81846113c2565b9695505050505050565b600067ffffffffffffffff8211156117835761178361156b565b5060209081020190565b600061179b61160a84611769565b838152905060208082019084028301858111156117ba576117ba600080fd5b835b818110156117de57806117cf8882611468565b845250602092830192016117bc565b5050509392505050565b600082601f8301126117fc576117fc600080fd5b8135610e5384826020860161178d565b60006080828403121561182157611821600080fd5b61182b60806115ae565b905060006118398484611666565b825250602061184a8484830161140b565b602083015250604061185e8482850161140b565b604083015250606082013567ffffffffffffffff81111561188157611881600080fd5b61188d84828501611635565b60608301525092915050565b60006118a761160a84611769565b838152905060208082019084028301858111156118c6576118c6600080fd5b835b818110156117de57803567ffffffffffffffff8111156118ea576118ea600080fd5b8086016118f7898261180c565b85525050602092830192016118c8565b600082601f83011261191b5761191b600080fd5b8135610e53848260208601611899565b6000806040838503121561194157611941600080fd5b823567ffffffffffffffff81111561195b5761195b600080fd5b611967858286016117e8565b925050602083013567ffffffffffffffff81111561198757611987600080fd5b6114a685828601611907565b80151561134f565b803561045381611993565b600080604083850312156119bc576119bc600080fd5b60006119c88585611468565b92505060206114a68582860161199b565b600080600080608085870312156119f2576119f2600080fd5b60006119fe8787611468565b9450506020611a0f87828801611468565b9350506040611a208782880161140b565b925050606085013567ffffffffffffffff811115611a4057611a40600080fd5b611a4c87828801611635565b91505092959194509250565b60008060408385031215611a6e57611a6e600080fd5b6000611a7a8585611468565b92505060206114a685828601611468565b634e487b7160e01b600052602260045260246000fd5b600281046001821680611ab557607f821691505b602082108103611ac757611ac7611a8b565b50919050565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6581527f7200000000000000000000000000000000000000000000000000000000000000602082015291505b5060400190565b6020808252810161045381611acd565b603d81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060208201529150611b23565b6020808252810161045381611b3a565b602d81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581527f72206f7220617070726f7665640000000000000000000000000000000000000060208201529150611b23565b6020808252810161045381611ba4565b6000610453611c1a8381565b90565b611c2683611c0e565b81546008840282811b60001990911b908116901990911617825550505050565b60006105b9818484611c1d565b81811015610c0357611c66600082611c46565b600101611c53565b601f8211156105b9576000818152602090206020601f85010481016020851015611c955750805b611ca76020601f860104830182611c53565b5050505050565b815167ffffffffffffffff811115611cc857611cc861156b565b611cd28254611aa1565b611cdd828285611c6e565b6020601f831160018114611d115760008415611cf95750858201515b600019600886021c1981166002860217865550611d6a565b600085815260208120601f198616915b82811015611d415788850151825560209485019460019092019101611d21565b86831015611d5d5784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b60408101611d808285611448565b610ca260208301846114f0565b601881526000602082017f4552433732313a20696e76616c696420746f6b656e2049440000000000000000815291505b5060200190565b6020808252810161045381611d8d565b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f74206120766181527f6c6964206f776e6572000000000000000000000000000000000000000000000060208201529150611b23565b6020808252810161045381611dd4565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198203611e7d57611e7d611e54565b5060010190565b6000611e8e825190565b611e9c81856020860161139e565b9290920192915050565b6000611eb28285611e84565b9150610e538284611e84565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529150611b23565b6020808252810161045381611ebe565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e746572000000000000000000000000000060208201529150611b23565b6020808252810161045381611f28565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000611dbd565b6020808252810161045381611f92565b601981526000602082017f4552433732313a20617070726f766520746f2063616c6c65720000000000000081529150611dbd565b6020808252810161045381611fd4565b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526000611dbd565b6020808252810161045381612018565b601c81526000602082017f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081529150611dbd565b602080825281016104538161205a565b608081016120ac8287611448565b6117406020830186611448565b805161045381611343565b6000602082840312156120d9576120d9600080fd5b6000610e5384846120b956fea264697066735822122066775728ea6068a981046bb75aa976061a3fae46b06c54fc3923a8be89a033bc64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018d5760003560e01c806370a08231116100e3578063a22cb4651161008c578063e73a914c11610066578063e73a914c1461035a578063e985e9c51461036d578063f2fde38b146103a957600080fd5b8063a22cb46514610321578063b88d4fde14610334578063c87b56dd1461034757600080fd5b80638da5cb5b116100bd5780638da5cb5b146102f55780638f3db9881461030657806395d89b411461031957600080fd5b806370a08231146102b7578063715018a6146102ca5780637a7d9227146102d257600080fd5b806323b872dd1161014557806359a1c6881161011f57806359a1c6881461028857806361bc221a1461029b5780636352211e146102a457600080fd5b806323b872dd1461023557806328a20f5e1461024857806342842e0e1461027557600080fd5b8063081812fc11610176578063081812fc146101d0578063095ea7b3146101f057806318ea65fd1461020557600080fd5b806301ffc9a71461019257806306fdde03146101bb575b600080fd5b6101a56101a0366004611365565b6103bc565b6040516101b29190611390565b60405180910390f35b6101c3610459565b6040516101b291906113f4565b6101e36101de366004611416565b6104eb565b6040516101b29190611451565b6102036101fe366004611473565b610512565b005b610228610213366004611416565b60009081526009602052604090205460ff1690565b6040516101b291906114f9565b610203610243366004611507565b6105be565b610268610256366004611416565b600a6020526000908152604090205481565b6040516101b2919061155d565b610203610283366004611507565b6105ec565b610268610296366004611671565b610607565b61026860085481565b6101e36102b2366004611416565b610848565b6102686102c5366004611704565b61087d565b6102036108c1565b6102e56102e0366004611416565b6108d5565b6040516101b29493929190611725565b6000546001600160a01b03166101e3565b61020361031436600461192b565b61098c565b6101c3610be9565b61020361032f3660046119a6565b610bf8565b6102036103423660046119d9565b610c07565b6101c3610355366004611416565b610c35565b610203610368366004611704565b610ca9565b6101a561037b366004611a58565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205460ff1690565b6102036103b7366004611704565b610cf3565b60006001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000148061041f57506001600160e01b031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b8061045357507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b60606001805461046890611aa1565b80601f016020809104026020016040519081016040528092919081815260200182805461049490611aa1565b80156104e15780601f106104b6576101008083540402835291602001916104e1565b820191906000526020600020905b8154815290600101906020018083116104c457829003601f168201915b5050505050905090565b60006104f682610d2d565b506000908152600560205260409020546001600160a01b031690565b600061051d82610848565b9050806001600160a01b0316836001600160a01b0316036105595760405162461bcd60e51b815260040161055090611b2a565b60405180910390fd5b336001600160a01b038216148061059357506001600160a01b038116600090815260066020908152604080832033845290915290205460ff165b6105af5760405162461bcd60e51b815260040161055090611b94565b6105b98383610d61565b505050565b6105c83382610ddc565b6105e45760405162461bcd60e51b815260040161055090611bfe565b6105b9600080fd5b6105b983838360405180602001604052806000815250610c07565b6007546000906001600160a01b0316336001600160a01b031614610657576040517fea8e4eb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826001600160a01b031661066a87610848565b6001600160a01b0316146106aa576040517f6d498aad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8360098111156106bc576106bc6114b0565b60008781526009602081905260409091205460ff16908111156106e1576106e16114b0565b14610718576040517febc3639d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600880546001019081905560408051602081019091526000815261073d918491610e5b565b6008546000908152600a6020526040908190208790558051608081019091528085600981111561076f5761076f6114b0565b81526020014281526020018781526020018681525060096000600854815260200190815260200160002060008201518160000160006101000a81548160ff021916908360098111156107c3576107c36114b0565b02179055506020820151600182015560408201516002820155606082015160038201906107f09082611cae565b5090505060085486836001600160a01b03167fc5eb36515745a5ebea3193ec3134046ab9c431fadb18f76eff5e044bf269bcd78688604051610833929190611d72565b60405180910390a45060085495945050505050565b6000818152600360205260408120546001600160a01b0316806104535760405162461bcd60e51b815260040161055090611dc4565b60006001600160a01b0382166108a55760405162461bcd60e51b815260040161055090611e2e565b506001600160a01b031660009081526004602052604090205490565b6108c9610e8e565b6108d36000610eb8565b565b600960205260009081526040902080546001820154600283015460038401805460ff90941694929391929161090990611aa1565b80601f016020809104026020016040519081016040528092919081815260200182805461093590611aa1565b80156109825780601f1061095757610100808354040283529160200191610982565b820191906000526020600020905b81548152906001019060200180831161096557829003601f168201915b5050505050905084565b610994610e8e565b8051825160009082146109d3576040517f200ad92c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81811015610be3578281815181106109ed576109ed611e3e565b602002602001015160200151600003610a32576040517fab75615c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6008805460010190558251839082908110610a4f57610a4f611e3e565b602002602001015160096000600854815260200190815260200160002060008201518160000160006101000a81548160ff02191690836009811115610a9657610a966114b0565b0217905550602082015160018201556040820151600282015560608201516003820190610ac39082611cae565b50905050610afc848281518110610adc57610adc611e3e565b602002602001015160085460405180602001604052806000815250610e5b565b828181518110610b0e57610b0e611e3e565b602002602001015160400151600a6000600854815260200190815260200160002081905550600854838281518110610b4857610b48611e3e565b602002602001015160400151858381518110610b6657610b66611e3e565b60200260200101516001600160a01b03167fc5eb36515745a5ebea3193ec3134046ab9c431fadb18f76eff5e044bf269bcd7610b9f3390565b878681518110610bb157610bb1611e3e565b602002602001015160000151604051610bcb929190611d72565b60405180910390a4610bdc81611e6a565b90506109d3565b50505050565b60606002805461046890611aa1565b610c03338383610f15565b5050565b610c113383610ddc565b610c2d5760405162461bcd60e51b815260040161055090611bfe565b610be3600080fd5b6060610c4082610d2d565b6000610c5760408051602081019091526000815290565b90506000815111610c775760405180602001604052806000815250610ca2565b80610c8184610fb7565b604051602001610c92929190611ea6565b6040516020818303038152906040525b9392505050565b610cb1610e8e565b6001600160a01b038116610cc457600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b610cfb610e8e565b6001600160a01b038116610d215760405162461bcd60e51b815260040161055090611f18565b610d2a81610eb8565b50565b6000818152600360205260409020546001600160a01b0316610d2a5760405162461bcd60e51b815260040161055090611dc4565b6000818152600560205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384169081179091558190610da382610848565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610de883610848565b9050806001600160a01b0316846001600160a01b03161480610e2f57506001600160a01b0380821660009081526006602090815260408083209388168352929052205460ff165b80610e535750836001600160a01b0316610e48846104eb565b6001600160a01b0316145b949350505050565b610e658383611058565b610e726000848484611160565b6105b95760405162461bcd60e51b815260040161055090611f82565b6000546001600160a01b031633146108d35760405162461bcd60e51b815260040161055090611fc4565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b816001600160a01b0316836001600160a01b031603610f465760405162461bcd60e51b815260040161055090612008565b6001600160a01b0383811660008181526006602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190610faa908590611390565b60405180910390a3505050565b60606000610fc483611261565b600101905060008167ffffffffffffffff811115610fe457610fe461156b565b6040519080825280601f01601f19166020018201604052801561100e576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611018575b509392505050565b6001600160a01b03821661107e5760405162461bcd60e51b81526004016105509061204a565b6000818152600360205260409020546001600160a01b0316156110b35760405162461bcd60e51b81526004016105509061208e565b6000818152600360205260409020546001600160a01b0316156110e85760405162461bcd60e51b81526004016105509061208e565b6001600160a01b0382166000818152600460209081526040808320805460010190558483526003909152808220805473ffffffffffffffffffffffffffffffffffffffff19168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b1561125657604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906111a490339089908890889060040161209e565b6020604051808303816000875af19250505080156111df575060408051601f3d908101601f191682019092526111dc918101906120c4565b60015b61123c573d80801561120d576040519150601f19603f3d011682016040523d82523d6000602084013e611212565b606091505b5080516000036112345760405162461bcd60e51b815260040161055090611f82565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610e53565b506001949350505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106112aa577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106112d6576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106112f457662386f26fc10000830492506010015b6305f5e100831061130c576305f5e100830492506008015b612710831061132057612710830492506004015b60648310611332576064830492506002015b600a83106104535760010192915050565b6001600160e01b031981165b8114610d2a57600080fd5b803561045381611343565b60006020828403121561137a5761137a600080fd5b6000610e53848461135a565b8015155b82525050565b602081016104538284611386565b60005b838110156113b95781810151838201526020016113a1565b50506000910152565b60006113cc825190565b8084526020840193506113e381856020860161139e565b601f01601f19169290920192915050565b60208082528101610ca281846113c2565b8061134f565b803561045381611405565b60006020828403121561142b5761142b600080fd5b6000610e53848461140b565b60006001600160a01b038216610453565b61138a81611437565b602081016104538284611448565b61134f81611437565b80356104538161145f565b6000806040838503121561148957611489600080fd5b60006114958585611468565b92505060206114a68582860161140b565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600a8110610d2a57610d2a6114b0565b806114e0816114c6565b919050565b6000610453826114d6565b61138a816114e5565b6020810161045382846114f0565b60008060006060848603121561151f5761151f600080fd5b600061152b8686611468565b935050602061153c86828701611468565b925050604061154d8682870161140b565b9150509250925092565b8061138a565b602081016104538284611557565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156115a7576115a761156b565b6040525050565b60006115b960405190565b90506114e08282611581565b600067ffffffffffffffff8211156115df576115df61156b565b601f19601f83011660200192915050565b82818337506000910152565b600061160f61160a846115c5565b6115ae565b90508281526020810184848401111561162a5761162a600080fd5b6110508482856115f0565b600082601f83011261164957611649600080fd5b8135610e538482602086016115fc565b600a8110610d2a57600080fd5b803561045381611659565b600080600080600060a0868803121561168c5761168c600080fd5b6000611698888861140b565b955050602086013567ffffffffffffffff8111156116b8576116b8600080fd5b6116c488828901611635565b94505060406116d588828901611666565b93505060606116e688828901611468565b92505060806116f788828901611468565b9150509295509295909350565b60006020828403121561171957611719600080fd5b6000610e538484611468565b6080810161173382876114f0565b6117406020830186611557565b61174d6040830185611557565b818103606083015261175f81846113c2565b9695505050505050565b600067ffffffffffffffff8211156117835761178361156b565b5060209081020190565b600061179b61160a84611769565b838152905060208082019084028301858111156117ba576117ba600080fd5b835b818110156117de57806117cf8882611468565b845250602092830192016117bc565b5050509392505050565b600082601f8301126117fc576117fc600080fd5b8135610e5384826020860161178d565b60006080828403121561182157611821600080fd5b61182b60806115ae565b905060006118398484611666565b825250602061184a8484830161140b565b602083015250604061185e8482850161140b565b604083015250606082013567ffffffffffffffff81111561188157611881600080fd5b61188d84828501611635565b60608301525092915050565b60006118a761160a84611769565b838152905060208082019084028301858111156118c6576118c6600080fd5b835b818110156117de57803567ffffffffffffffff8111156118ea576118ea600080fd5b8086016118f7898261180c565b85525050602092830192016118c8565b600082601f83011261191b5761191b600080fd5b8135610e53848260208601611899565b6000806040838503121561194157611941600080fd5b823567ffffffffffffffff81111561195b5761195b600080fd5b611967858286016117e8565b925050602083013567ffffffffffffffff81111561198757611987600080fd5b6114a685828601611907565b80151561134f565b803561045381611993565b600080604083850312156119bc576119bc600080fd5b60006119c88585611468565b92505060206114a68582860161199b565b600080600080608085870312156119f2576119f2600080fd5b60006119fe8787611468565b9450506020611a0f87828801611468565b9350506040611a208782880161140b565b925050606085013567ffffffffffffffff811115611a4057611a40600080fd5b611a4c87828801611635565b91505092959194509250565b60008060408385031215611a6e57611a6e600080fd5b6000611a7a8585611468565b92505060206114a685828601611468565b634e487b7160e01b600052602260045260246000fd5b600281046001821680611ab557607f821691505b602082108103611ac757611ac7611a8b565b50919050565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6581527f7200000000000000000000000000000000000000000000000000000000000000602082015291505b5060400190565b6020808252810161045381611acd565b603d81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060208201529150611b23565b6020808252810161045381611b3a565b602d81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581527f72206f7220617070726f7665640000000000000000000000000000000000000060208201529150611b23565b6020808252810161045381611ba4565b6000610453611c1a8381565b90565b611c2683611c0e565b81546008840282811b60001990911b908116901990911617825550505050565b60006105b9818484611c1d565b81811015610c0357611c66600082611c46565b600101611c53565b601f8211156105b9576000818152602090206020601f85010481016020851015611c955750805b611ca76020601f860104830182611c53565b5050505050565b815167ffffffffffffffff811115611cc857611cc861156b565b611cd28254611aa1565b611cdd828285611c6e565b6020601f831160018114611d115760008415611cf95750858201515b600019600886021c1981166002860217865550611d6a565b600085815260208120601f198616915b82811015611d415788850151825560209485019460019092019101611d21565b86831015611d5d5784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b60408101611d808285611448565b610ca260208301846114f0565b601881526000602082017f4552433732313a20696e76616c696420746f6b656e2049440000000000000000815291505b5060200190565b6020808252810161045381611d8d565b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f74206120766181527f6c6964206f776e6572000000000000000000000000000000000000000000000060208201529150611b23565b6020808252810161045381611dd4565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198203611e7d57611e7d611e54565b5060010190565b6000611e8e825190565b611e9c81856020860161139e565b9290920192915050565b6000611eb28285611e84565b9150610e538284611e84565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529150611b23565b6020808252810161045381611ebe565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527f63656976657220696d706c656d656e746572000000000000000000000000000060208201529150611b23565b6020808252810161045381611f28565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000611dbd565b6020808252810161045381611f92565b601981526000602082017f4552433732313a20617070726f766520746f2063616c6c65720000000000000081529150611dbd565b6020808252810161045381611fd4565b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526000611dbd565b6020808252810161045381612018565b601c81526000602082017f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081529150611dbd565b602080825281016104538161205a565b608081016120ac8287611448565b6117406020830186611448565b805161045381611343565b6000602082840312156120d9576120d9600080fd5b6000610e5384846120b956fea264697066735822122066775728ea6068a981046bb75aa976061a3fae46b06c54fc3923a8be89a033bc64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRecitation(uint256)": {
        "details": "Returns recitation of the ejaza.",
        "params": {
          "_ejazaId": ": Id of the ejaza."
        },
        "returns": {
          "_0": "Recitation of the ejaza."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "NotValidIssueTime()": [
        {
          "notice": "if  _legacyEjaza[index].issueTime == 0 || _legacyEjaza[index].issueTime >= block.timestamp "
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 428,
        "contract": "contracts/HafizEjaza.sol:HafizEjaza",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 559,
        "contract": "contracts/HafizEjaza.sol:HafizEjaza",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 561,
        "contract": "contracts/HafizEjaza.sol:HafizEjaza",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 565,
        "contract": "contracts/HafizEjaza.sol:HafizEjaza",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 569,
        "contract": "contracts/HafizEjaza.sol:HafizEjaza",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 573,
        "contract": "contracts/HafizEjaza.sol:HafizEjaza",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 579,
        "contract": "contracts/HafizEjaza.sol:HafizEjaza",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 9945,
        "contract": "contracts/HafizEjaza.sol:HafizEjaza",
        "label": "daoContract",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9947,
        "contract": "contracts/HafizEjaza.sol:HafizEjaza",
        "label": "counter",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 9952,
        "contract": "contracts/HafizEjaza.sol:HafizEjaza",
        "label": "isssuedEjaza",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Ejaza)10629_storage)"
      },
      {
        "astId": 9956,
        "contract": "contracts/HafizEjaza.sol:HafizEjaza",
        "label": "ejazaLink",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Recitations)10619": {
        "encoding": "inplace",
        "label": "enum IEjaza.Recitations",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Ejaza)10629_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IEjaza.Ejaza)",
        "numberOfBytes": "32",
        "value": "t_struct(Ejaza)10629_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Ejaza)10629_storage": {
        "encoding": "inplace",
        "label": "struct IEjaza.Ejaza",
        "members": [
          {
            "astId": 10622,
            "contract": "contracts/HafizEjaza.sol:HafizEjaza",
            "label": "qiraa",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Recitations)10619"
          },
          {
            "astId": 10624,
            "contract": "contracts/HafizEjaza.sol:HafizEjaza",
            "label": "issueTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10626,
            "contract": "contracts/HafizEjaza.sol:HafizEjaza",
            "label": "parentCertId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10628,
            "contract": "contracts/HafizEjaza.sol:HafizEjaza",
            "label": "recodingURl",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}